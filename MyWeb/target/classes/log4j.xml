<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- 
		자바를 이용한 백엔드 로직을 작성하다보면, 결과를 확인하기위해
		System.out.pringln() 을 사용해왔습니다. (콘솔에 출력만 하는 메서드)
		System.out.pringln()은 단순 출력 이상의 기능을 수행할 수 없기 때문에
		로그에 대한 다양한 기능을 제공하는 log4j라이브러리를 사용합니다.
 	-->

	<!-- Appenders -->
	<!-- appender : 로그의 출력위치(파일, 콘솔, DB등)를 결정합니다. -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
		<!-- layout : 출력형식 -->
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- 경로를 씨드라이브로 잡아서 주석처리해둠 -->
	<!-- 날짜별 로그 파일 생성 - DailyRollingFile -->
	<!-- 설정한 기간 단위로 새 파일을 만들어 로그메세지를 기록합니다. -->
   <!--  <appender name="rollingFile" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="File" value="C:/LOG/all.log"/>
        <param name="Append" value="true"/>
        param name="MaxFileSize" value="100MB"/
        param name="MaxBackupIndex" value="2"></param
        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
        
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %p [%C{10}] %m [%X{userId}]%n" />
        </layout>  
    </appender> -->
    <!--
        	%p	: 로그레벨출력 (info, error, warn...)
        	%m 	: 메세지
        	%c	: 전체 패키지명 또는 파일 이름 (%C : 클래스이름)
        	%d	: 이벤트 발생 시각(yyyy-MM-dd HH:mm:ss)
        	숫자 : 공백, 글자가 차지할 공간. 음수로 주면 좌측정렬, 양수 주면 우측정렬.
        -->
    <!-- 이거도 경로가 씨드라이브라 주석처리... -->
    <!-- 날짜별 로그 파일 생성(에러만) -->
<!--     <appender name="errFile" class="org.apache.log4j.DailyRollingFileAppender">
        <param name="Threshold" value="ERROR"/>
        <param name="File" value="C:/LOG/error.log"/>
        <param name="Append" value="true"/>
        param name="MaxFileSize" value="100MB"/
        param name="MaxBackupIndex" value="2"></param
        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %5p [%C{1}] %m [%X{userId}]%n" />
        </layout>  
    </appender> -->
	
	
	
	
	<!-- log4j의 여러가지 로그 레벨 (logger.fatal  logger.info 이런식으로 사용)
		level을 높게 레벨 설정하면 그 아래 로그들은 출력되지 않는다.
	
		FATAL (가장 높음)	- 가장심각한 문제가 발생할 때 사용
		ERROR	- 문제가 발생한 상태
		WARN	- 오류의 원인이 될 수 있는 메세지
		INFO	 - 상태변경같은 실제 어플리케이션의 운영과 관련된 로직
		DEBUG	- 디버깅 용도
		TRACE (가장 낮음)	- 가장 상세한 로깅정보 출력
	 -->
	
	
	<!-- AOP 패키지를 로그 레벨로 추가하기 -->
	<logger name="com.spring.myweb.util.aop">	<!-- 패키지 경로 -->
		<level value="info" />
		<!-- <level value="error"/> 이렇게 해두면 info 이하수준으로 설정해둔 logger는 출력 안된다. -->
	</logger>
	
	
	 
	
	
	
	<!-- Application Loggers -->
	<logger name="com.spring.myweb">
		<level value="info" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<!-- 스프링 로그들 안궁금하면 3rd party 지워도 된다. -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>
	
	
	
	<!-- SQL Logger -->
	<!-- DB연결에 관련된 모든 이벤트 기록  (Connection pool 등 )-->
	<logger name="jdbc.connection" additivity="false">
		<level value="warn"/>
		<appender-ref ref="console" />
	</logger>
	
	<!-- ResultSet(select문)을 제외한 모든 JDBC 호출내역을 기록 -->
	<logger name="jdbc.audit" additivity="false">
		<level value="warn"/>
		<appender-ref ref="console" />
	</logger>
	
	<!-- ResultSet을 포함한 모든 JDBC 호출내역을 기록 -->
	<logger name="jdbc.resultset" additivity="false">
		<level value="warn"/>
		<appender-ref ref="console" />
	</logger>
	
	<!-- SQL문만 기록 : ('?'값이 드러납니다.)-->
	<logger name="jdbc.sqlonly" additivity="false">
		<level value="info"/>
		<appender-ref ref="console" />
	</logger>
	
	<!-- table 모양으로 조회된 모양을 기록합니다. -->
	<logger name="jdbc.resultsettable" additivity="false">
		<level value="info"/>
		<appender-ref ref="console" />
	</logger>
	
	<!-- 해당 SQL을 실행시키는 데 소요한 시간정보 기록(밀리초) -->
	<logger name="jdbc.sqltiming" additivity="false">
		<level value="warn"/>
		<appender-ref ref="console" />
	</logger>
	


	<!-- Root Logger -->
	<root>
		<priority value="info" />
		<appender-ref ref="console" />
		<!-- <appender-ref ref="errFile" />
		<appender-ref ref="rollingFile" /> 위에 설정한 appender들 지정 -->
	</root>
	
	
	
	
	
	
</log4j:configuration>
